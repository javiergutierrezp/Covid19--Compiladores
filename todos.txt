# Fresh start

## Expresiones aritméticas / lógicas relacionase
	- Quads son correctos
	- Comparacion entre 2 variables
	- Operaciones aritméticas entre 2 variables
		- Asegurarnos que operaciones simples funcionan entre chars y strings
	- Edge cases potenciales
		- Dividir entre 0
		- Type missmatch

## Estatutos de interacción
	- Entrada (Lee) asignar lo leído a…
		- Quads son correctos
		- Int
		- Float
		- String
		- Char
		- Espacio de matríz (Int)
		- Espacio de matríz (String)
	- Salida
		- Impresión individual
			- Quads son correctos
			- Int
			- Float
			- String
			- Char
			- Espacio de matríz (Int)

## Estatutos de control de flujo
	- Correr un desde - hasta exitosamente
		- Quads son correctos
		- con desde - hasta dentro 
		- con mientras - haz dentro
		- un si - entonces - si no dentro
	- Correr un mientras - haz exitosamente
		- Quads son correctos
		- con desde - hasta dentro 
		- con mientras - haz dentro
		- un si - entonces - si no dentro
	- Si - entonces - si no
		- Quads son correctos
		- con mientras - haz dentro
		- con desde - hasta dentro 
		- si - entonces - si no dentro

## Manejo de contextos
	* Base
		- Que parametros lleguen
		- Que podamos crearle una memoria “aislada” a esa función mientras corre
		- Que los espacios de memoria dentro de la función estén siendo asignados y accesados correctamente
	* Tipos de funciones
		* Void
			- Asegurarnos que si regresa algo truene
		* No void
			- Asegurarnos que si no regresa algo truene
		* Recursion
			- Asegurarnos que los quads sean correctos
				- Replicar código de maestra
				- Pedirle a Carlos y/o a Silva que nos pasen un screenshot de fibonacci generando quads
				- Correr Otter en nuestra máquina y hacer correr una función recursiva
			- Lograr crear múltiples memorias “aisladas” sin perder el control de qué le corresponde a quien
			- Al mandar llamar una función dentro de si misma evaluar los parámetros de esta con la memoria actual (no la nueva que acabamos de crear)
			- “Agregar a var counter cuando recibimos parámetros”
		* No recursion
			- Creación de memoria “aislada”
			- Destrucción de memoria aislada cuando acabamos función
	* Situaciones
		* Declaración
			- Generamos los quads de declaración correctamente (REGRESA, ENDFUNC)
		* Llamada
			- Generamos los quads de llamada correctamente (ERA, PARAM, GOSUB, PARCHE)

## Manejo de elementos no atómicos
* Arreglos
	- Declaración
	- Asignación
	- Uso en diversos escenarios
		- Parametro de una función
		- Dentro de un ciclo
		- Como límite de un ciclo
	- Casos extremos
		- Index es mas bajo o alto que su tamaño
		- Llenar una matriz con un for anidado

## Elementos propios
* Dataframe
	- Definir estructura con la que guardamos los datos (Probablemente un arreglo)
	- Definir funciones “built-in” de nuestro lenguaje para el uso de dataframes
		* CargaArchivo
			- Definir estructura de archivo a interpretar
		* Media
		* Moda
	- Somos capaces de abrir un documento y ingresar sus datos exitosamente a casillas de memoria virtual 
---
## Mantenimiento…
- Quitar offset de cálculos